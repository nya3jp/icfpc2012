#!/usr/bin/python

import md5
import os
import sys

# TODO parser metadata?
DATA = {
  # contest1.map
  '77610319e1718a0cee131961adb9118f': 'DLRDDUULLLDDL',
  # contest2.map
  '39641a27508c0328419db0ca61df629a': 'RRUDRRULURULLLLDDDL',
  # contest3.map
  '13c96e7715babe8edbaea110d1bafb4d': 'LDDDRRRRDDLLLLLDURRRRUURR',
  # contest4.map
  'fe7abed479f80e4c68b8c22cc73474dc': 'URDDLRDRDRDRRLUUURUULUDRR',
  # contest5.map
  '737844d8d763fd05902ecbcd7a813c1c': 'LLUURUUUUURRRRRLDDRRRDDDDDLLRRUUUUULLLLLLRRDDDDDD',
  # contest6.map
  'e4178dadf219f7aec26b51febc230da1': 'RUULRRRRRRRRRRUUURRDDDDDLLLLLLLLLRRRRRRRRRUUUUULUURUUULULLULLLLLLDDRRRDULLLUULLLDRDLDDDDDDRRRRRRRR',
  # contest7.map
  '4e616168699e260be689dea4d97e5c71': 'RDRRRDRDDDRRRLLLUULLLLDDLLRRURR',
  # contest8.map
  '6e6dab91d151c3e51305316212047422': 'UULLDDRLULLLLLRRRRRURRRRRRURRRLLLLLLLUUUUUUUUULLLLUUULLLLLRRDDDDDDLDRDDDLLRRUUUULLDDUURRUUUUUURRRDDDRRRRDDRRRRRDRRDDWLDDDDRRDDDLLLLLLLLD',
  # contest9.map
  'b2f4e4825deb0ac375e77b4ae8dcbc2a': 'LRUURRRDULLLDDRRRRRRRRRRRRRRRULLURRRRRRRRRDDLLLULDUULLLLLULLLULDURUUUULLLLLLRRUUULDDRWLLRWLLLLRRRURRURUURRRRDDRRRRRRDDRRRRDUULLULLLLLLUUULLLLLLU',
  # contest10.map
  '7a9023b1df79269de0ab9e73f5b89c31': 'UUUUULLLDLULLDRDDRRRLLLUULLLLLLLDLLDDDLLLLUUULLLLURRRRUULLLLLLLLUURRRRULLLUUULUUURRRUULUUURDRDURRRRRUURRRRRRRRRRRRRRRRRLLLLDDRRLLLLULLLDDDRRUDLLLDDDDDLLDDLDDRRULURRUURRDDRRRRRUURRDRLULLDDDDRRRDDDDDDDDD',
  # flood1.map
  'ce5d571a8a2351227a9d16cc827d19e8': 'LLLLDDDRRRDDRRULLLULURRRRRRRDDDD',
  # flood2.map
  '3a2c41ed7153ae3cd58360a0716f1b44': 'RRUDRRULURULLLLDDDL',
  # flood3.map
  '8e90152301dd762385ed33590ca40ac8': 'LLUURUUUUURRRRRLDDRRRDDDDDLLRRUUUUULLLLLLRRDDDDDD',
  # flood4.map
  '59245d3f13595f823f4c4dd26caff78c': 'RRRRRDDDDDDDRRRRRRRRRRRRRRULLLLUUUUURRURRLLDDLDWRRRULLLLDLLLLLLLLLLLLDDUULLLLUUUULLULLLLLLLLLLLLUUUURRRRRRRUURRURRRRRRRRRRRRDDDDDDLLLLULLLLLDDDRRRRRRRRRDRRRRRRRRRUUULLLRRRDDDDDDRRRRR',
  # flood5.map
  '6eff0504868a09460b8c498f2c42d19d': 'URDDLRDRDRDRRLUUURUULUDRR',
  # trampoline1.map
  '7b66377044cb20ac02547a29eeb1a9e6': 'RRDDLDURRDLURRUULDLLLURRRRRRDD',
  # trampoline2.map
  '048d7b63f4a5d646a0cef17706f25470': 'UULLLLLDRURRRRRDDLULDLLLLLLURULLLDDLULDLUUULULUUURRRDRDLLL',
  # trampoline3.map
  '4be6c2c95b2ceb0d4b3109b06899f0d8': 'RRRRDDLDDDDDDDLRRRRRRRRDDDLLDDDULRUURRUUUURUUUURRRRUURRRRRRRRRRRRRRRRRRDDDRDDDDRRLULLUUUULLLLLLLLLLLLLRRRRRRRRRRRRDDRLLDDDDDLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLLUULLLLLLLLLLLLUUUULLDRDLDRRDRRRUUUURRRRURRRRRRRRRRRR',
  # beard1.map
  '4b5d3fd2ec280a1e1c56e786f86c4073': 'RDLLDURRRDDDSLLLDDRURRRRUUUUULURRRDDDDDR',
  # beard2.map
  '4295df86c569c706c2257ad3a36c1d9a': 'DDDDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRULLLLLLLUULRDDLLLUURDWLDLLLLLLUURRRULLLLLDDLLLLUUURRRRRRUURRRRRRDDUURRRRRDDRRRRRRUUULLLLLLLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRRRRRDRRDRDDDDDDD',
  # beard3.map
  'eed1c7bda2a0a5c3e30ba7a003586aca': 'DRRRRRLLLLDDRRRRDDWSDSUULLULLDDURRRRDDDDRRRLLLLLUDLLDLDDRRRULLLSUURULLUULUUURWLLRDLLLDLLLLDRRDDLUDLLU',
  # beard4.map
  '7655ff0daa480aa531e896b8ef5a5cd9': 'LLLLLDDDDLRUULLLDLDDUURURRRUULLLLRRRLLUURRLLDDRRRRRRRDURRDDDDRLUUULULWRURRLLLLLLRRRDDRRDRRRRUUURRDLRRDLDLDDDDDDDLLLLDDDUUULLLUURRLLUUUDDDLLLLLRRRRRDDLLLLLLLLRRRRRRRRRRRDDLLLLLLLLLLLRRRRRRRRRRRRRRRRRLLUSURRUUUUUR',
  # beard5.map
  'd7e88720ce6d3b3dcdd90142da8d136c': 'SRURDSRURRLURRLDLRLUUUUULLLLLLLLURRUUURRRRRRRRDRDDRRRRRRDDDDRDDLLLLLDD',
  # horock1.map
  '87504dcfc68124644f1f27901bdf5a4f': 'DRRDDRLDDUUUUURRRRRUULDDWRLUURUULLLUUUDDDRRRRRDLLDDUURRRDDDRRRULLLUUUUUUULLUU',
  # horock2.map
  'fc4de8f230ea559f10a8228ef32987d3': 'RRRRRRRRRRRRRWLLLLLLLLLLLUUURRRRRRRRLLLLLLDULLLLUULULRLLLRLLRLRLULLLLLLLLLLDDDDDD',
  # horock3.map
  '533b1479c1a26493aed515eb358879bf': 'RRUUULLUUUUURUUURRRDRRRRLDDRRRRDDDDRRURRRRRRRRRSDSULLLLLLUUUULLLUULLDRRDDLLLLLLULULLDDLLDDDDDDDDRRRLRRRRRLRRRRRLWRULULULULULULULULRRRRRRRRDDDRRRRRRRRRDRDD',
}

def Compile(data_file):
  result = []
  with open(data_file, 'r') as stream:
    for line in stream:
      (file_path, solution) = line.strip().split()
      with open(os.path.join(os.path.dirname(os.path.abspath(__file__)),
                             '..', 'maps', file_path), 'r') as input_file:
        data = input_file.read()
      result.append((file_path, GetMd5(data), solution.strip()))
  print ''.join('  # %s\n  %s: %s,\n' % (filename, repr(key), repr(value))
                  for filename, key, value in result)


def GetMd5(data):
  lines = data.replace('\r\n', '\n').replace('\r', '\n').splitlines()
  lines = [line.rstrip() for line in lines]

  m = md5.new()
  m.update('\n'.join(lines))
  return m.hexdigest()

def PrintMd5():
  for arg in sys.argv[1:]:
    with open(arg, 'r') as stream:
      md5hash = GetMd5(stream.read())
    print "%s" % md5hash

def main():
  if len(sys.argv) > 1:
    Compile(sys.argv[1])
    sys.exit(1)

  input_data = sys.stdin.read()
  md5hash = GetMd5(input_data)
  result = DATA.get(md5hash, 'A')
  print result


if __name__ == '__main__':
  main()
